JPMC: 
 
1) give number of pairs of numbers from a given list whose sum is 48.
2) write a singleton class
3) multithreading, volatile, transaction management
 
VISA:
 
Move Zeroes problem
Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.
Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]


Q1.
You are given an array of integers. Your task is to create pairs of them, such that every pair consists of equal numbers. Each array element may belong to one pair only. Is it possible to use all of the integers?

Write a function:

class Solution { public boolean solution(int[] A); }

that, given an array A consisting of N integers, returns whether it is possible to split all integers into pairs.

Examples:

1. Given A = [1, 2, 2, 1], your function should return True, as the pairs are (A[0], A[3]) (both have value 1) and (A[1], A[2]) (both have value 2).

2. Given A = [7, 7, 7], your function should return False, as you can make one pair of numbers 7, but you still have a single 7 left.

3. Given A = [1, 2, 2, 3], your function should return False, as there's nothing that A[0] can be paired with.

Write an efficient algorithm for the following assumptions:

N is an integer within the range [1..100,000];
each element of array A is an integer within the range [−1,000,000..1,000,000].


Q2.

There is an array A consisting of N integers. What is the maximum sum of two integers from A that share their first and last digits? For example, 1007 and 167 share their first (1) and last (7) digits, whereas 2002 and 55 do not.

Write a function:

class Solution { public int solution(int[] A); }

that, given an array A consisting of N integers, returns the maximum sum of two integers that share their first and last digits. If there are no two integers that share their first and last digits, the function should return −1.

Examples:

1. Given A = [130, 191, 200, 10], the function should return 140. The only integers in A that share first and last digits are 130 and 10.

2. Given A = [405, 45, 300, 300], the function should return 600. There are two pairs of integers that share first and last digits: (405, 45) and (300, 300). The sum of the two 300s is bigger than the sum of 405 and 45.

3. Given A = [50, 222, 49, 52, 25], the function should return −1. There are no two integers that share their first and last digits.

4. Given A = [30, 909, 3190, 99, 3990, 9009], the function should return 9918.

Write an efficient algorithm for the following assumptions:

N is an integer within the range [1..100,000];
each element of array A is an integer within the range [10..1,000,000,000].

 

Q3.
There are two wooden sticks of lengths A and B respectively. Each of them can be cut into shorter sticks of integer lengths. Our goal is to construct the largest possible square. In order to do this, we want to cut the sticks in such a way as to achieve four sticks of the same length (note that there can be some leftover pieces). What is the longest side of square that we can achieve?

Write a function:

class Solution { public int solution(int A, int B); }

that, given two integers A, B, returns the side length of the largest square that we can obtain. If it is not possible to create any square, the function should return 0.

Examples:

1. Given A = 10, B = 21, the function should return 7. We can split the second stick into three sticks of length 7 and shorten the first stick by 3.

2. Given A = 13, B = 11, the function should return 5. We can cut two sticks of length 5 from each of the given sticks.

3. Given A = 2, B = 1, the function should return 0. It is not possible to make any square from the given sticks.

4. Given A = 1, B = 8, the function should return 2. We can cut stick B into four parts.

Write an efficient algorithm for the following assumptions:

A and B are integers within the range [1..1,000,000,000].

 

Q4.

We are given a string S of length N consisting only of letters 'A' and/or 'B'. Our goal is to obtain a string in the format "A...AB...B" (all letters 'A' occur before all letters 'B') by deleting some letters from S. In particular, strings consisting only of letters 'A' or only of letters 'B' fit this format.

Write a function:

class Solution { public int solution(String S); }

that, given a string S, returns the minimum number of letters that need to be deleted from S in order to obtain a string in the above format.

Examples:

1. Given S = "BAAABAB", the function should return 2. We can obtain "AAABB" by deleting the first occurrence of 'B' and the last occurrence of 'A'.

2. Given S = "BBABAA", the function should return 3. We can delete all occurrences of 'A' or all occurrences of 'B'.

3. Given S = "AABBBB", the function should return 0. We do not have to delete any letters, because the given string is already in the expected format.

Write an efficient algorithm for the following assumptions:

N is an integer within the range [1..100,000];
string S is made only of the characters 'A' and/or 'B'.


Q5.
You are given a string letters made of N English letters. Count the number of different letters that appear in both uppercase and lowercase where all lowercase occurrences of the given letter appear before any uppercase occurrence.

For example, for letters = "aaAbcCABBc" the answer is 2. The condition is met for letters 'a' and 'b', but not for 'c'.

Write a function:

class Solution { public int solution(String letters); }

that, given a string letters, returns the number of different letters fulfilling the conditions above.

Examples:

1. Given letters = "aaAbcCABBc", the function should return 2, as explained above.

2. Given letters = "xyzXYZabcABC", the function should return 6.

3. Given letters = "ABCabcAefG", the function should return 0.

Write an efficient algorithm for the following assumptions:

N is an integer within the range [1..100,000];
string letters is made only of letters (a−z and/or A−Z).